{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hp\":{\"current\":10,\"max\":10},\"skills\":{\"hacking\":30000,\"strength\":2,\"defense\":3,\"dexterity\":1,\"agility\":2,\"charisma\":1,\"intelligence\":0},\"exp\":{\"hacking\":19411.109530789825,\"strength\":0,\"defense\":0,\"dexterity\":0,\"agility\":0,\"charisma\":0,\"intelligence\":0},\"mults\":{\"hacking_chance\":3.5066895232067488,\"hacking_speed\":2.8350242233994822,\"hacking_money\":5.343526892505522,\"hacking_grow\":1.3358817231263804,\"hacking\":2.757835975525948,\"strength\":2.604969360096442,\"defense\":3.8206217281414485,\"dexterity\":1.3358817231263804,\"agility\":2.003822584689571,\"charisma\":1.3358817231263804,\"hacking_exp\":1.4694698954390186,\"strength_exp\":1.4694698954390186,\"defense_exp\":1.4694698954390186,\"dexterity_exp\":1.4694698954390186,\"agility_exp\":1.4694698954390186,\"charisma_exp\":1.4694698954390186,\"company_rep\":1.3358817231263804,\"faction_rep\":1.3358817231263804,\"crime_money\":1.3358817231263804,\"crime_success\":1.3358817231263804,\"hacknet_node_money\":1.3358817231263804,\"hacknet_node_purchase_cost\":0.7485685167244365,\"hacknet_node_ram_cost\":0.7485685167244365,\"hacknet_node_core_cost\":0.7485685167244365,\"hacknet_node_level_cost\":0.7485685167244365,\"work_money\":1.3358817231263804,\"bladeburner_max_stamina\":1,\"bladeburner_stamina_gain\":1,\"bladeburner_analysis\":1,\"bladeburner_success_chance\":1},\"augmentations\":[{\"level\":1,\"name\":\"Neurotrainer I\"},{\"level\":29,\"name\":\"NeuroFlux Governor\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen I\"},{\"level\":1,\"name\":\"Synaptic Enhancement Implant\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen II\"},{\"level\":1,\"name\":\"BitWire\"},{\"level\":1,\"name\":\"NEMEAN Subdermal Weave\"},{\"level\":1,\"name\":\"Synfibril Muscle\"},{\"level\":1,\"name\":\"Synthetic Heart\"},{\"level\":1,\"name\":\"QLink\"},{\"level\":1,\"name\":\"The Red Pill\"}],\"queuedAugmentations\":[],\"city\":\"Ishima\",\"bitNodeN\":1,\"corporation\":null,\"gang\":null,\"bladeburner\":null,\"currentServer\":\"CSEC\",\"factions\":[\"Illuminati\",\"Daedalus\",\"The Covenant\",\"ECorp\",\"MegaCorp\",\"Bachman & Associates\",\"Blade Industries\",\"NWO\",\"Clarke Incorporated\",\"OmniTek Incorporated\",\"Four Sigma\",\"KuaiGong International\",\"Fulcrum Secret Technologies\",\"NiteSec\",\"Chongqing\",\"Ishima\",\"New Tokyo\",\"Tian Di Hui\",\"CyberSec\"],\"factionInvitations\":[],\"hacknetNodes\":[],\"has4SData\":true,\"has4SDataTixApi\":true,\"hashManager\":{\"ctor\":\"HashManager\",\"data\":{\"capacity\":0,\"hashes\":0,\"upgrades\":{\"Sell for Money\":0,\"Sell for Corporation Funds\":0,\"Reduce Minimum Security\":0,\"Increase Maximum Money\":0,\"Improve Studying\":0,\"Improve Gym Training\":0,\"Exchange for Corporation Research\":0,\"Exchange for Bladeburner Rank\":0,\"Exchange for Bladeburner SP\":0,\"Generate Coding Contract\":0,\"Company Favor\":0}}},\"hasTixApiAccess\":true,\"hasWseAccount\":true,\"jobs\":{},\"karma\":500,\"numPeopleKilled\":0,\"location\":\"Storm Technologies\",\"money\":1e+146,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":0,\"codingcontract\":0,\"corporation\":0,\"crime\":0,\"gang\":0,\"hacking\":40119.040569310564,\"hacknet\":0,\"hacknet_expenses\":0,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":-5399639880.959431,\"work\":0,\"servers\":-84480000,\"other\":-5315200000,\"augmentations\":0}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":-147024,\"codingcontract\":0,\"corporation\":0,\"crime\":0,\"gang\":0,\"hacking\":708233.4497013678,\"hacknet\":15299168.078241117,\"hacknet_expenses\":-6029369.816564974,\"hospitalization\":-4845.15187120815,\"infiltration\":0,\"sleeves\":0,\"stock\":-31200000000,\"total\":-14607025330873911000,\"work\":0,\"servers\":-14499560571370959000,\"other\":-10629400000,\"augmentations\":-107464717683394420}},\"playtimeSinceLastAug\":64169400,\"playtimeSinceLastBitnode\":231697600,\"lastAugReset\":1694992584226,\"lastNodeReset\":-1,\"purchasedServers\":[\"scripttest\",\"scripttest2\",\"scripttest3\"],\"scriptProdSinceLastAug\":0,\"sleeves\":[],\"sleevesFromCovenant\":0,\"sourceFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"exploits\":[\"EditSaveFile\"],\"achievements\":[{\"ID\":\"NS2\",\"unlockedOn\":1694835762631},{\"ID\":\"FIRST_HACKNET_NODE\",\"unlockedOn\":1694923588785},{\"ID\":\"HOSPITALIZED\",\"unlockedOn\":1694924085174},{\"ID\":\"WORKOUT\",\"unlockedOn\":1694935905575},{\"ID\":\"BRUTESSH.EXE\",\"unlockedOn\":1694936805432},{\"ID\":\"CYBERSEC\",\"unlockedOn\":1694937105380},{\"ID\":\"HACKNET_NODE_10M\",\"unlockedOn\":1694986716608},{\"ID\":\"DAEDALUS\",\"unlockedOn\":1694988624479},{\"ID\":\"THE_COVENANT\",\"unlockedOn\":1694988624503},{\"ID\":\"ILLUMINATI\",\"unlockedOn\":1694988624507},{\"ID\":\"MONEY_1Q\",\"unlockedOn\":1694988624516},{\"ID\":\"REPUTATION_10M\",\"unlockedOn\":1694988624522},{\"ID\":\"DONATION\",\"unlockedOn\":1694988624528},{\"ID\":\"EDITSAVEFILE\",\"unlockedOn\":1694988624534},{\"ID\":\"4S\",\"unlockedOn\":1694989036623},{\"ID\":\"30_HACKNET_NODE\",\"unlockedOn\":1694989157549},{\"ID\":\"INSTALL_1\",\"unlockedOn\":1694990854480},{\"ID\":\"MAX_CORES\",\"unlockedOn\":1694992175962},{\"ID\":\"TOR\",\"unlockedOn\":1694992175991},{\"ID\":\"FTPCRACK.EXE\",\"unlockedOn\":1694992236619},{\"ID\":\"RELAYSMTP.EXE\",\"unlockedOn\":1694992236623},{\"ID\":\"HTTPWORM.EXE\",\"unlockedOn\":1694992236627},{\"ID\":\"SQLINJECT.EXE\",\"unlockedOn\":1694992236635},{\"ID\":\"FORMULAS.EXE\",\"unlockedOn\":1694992236641},{\"ID\":\"MAX_RAM\",\"unlockedOn\":1694992236647},{\"ID\":\"TRAVEL\",\"unlockedOn\":1695008986570},{\"ID\":\"NITESEC\",\"unlockedOn\":1695056684254}],\"terminalCommandHistory\":[\"sl\",\"sls\",\"ls\",\"sl\",\"sls\",\"ls\",\"cls\",\"analyze\",\"run nuke.exe\",\"analyze\",\"scan-analyze 10\",\"home\",\"scan-analyze 10\",\"buy -a\",\"run nuke.exe\",\"run brutessh.exe\",\"run ftpcrack.exe\",\"run nuke.ex\",\"run NUKE.exe \",\"cls\",\"hack\",\"analyze\",\"home\",\"scan-analyze 10\",\"run nuke.exe\",\"hack\",\"home\",\"scan-analyze 10\",\"scan-analyze\",\"scan-analyze 10\",\"analyze\",\"nano weaken.script\",\"ls\",\"cls\",\"ls\",\"nano utils.js\",\"run utils.js\",\"run utils.js \",\"backdoor\",\"scan-analyze 10\",\"run brutessh.exe\",\"run ftpcrack.exe\",\"run httpworm.exe\",\"hack\",\"run httpworm.exe\",\"run brutessh.exe\",\"run relaysql.exe\",\"run sqlinject.exe\",\"run NUKE.exe \",\"hack \"],\"lastUpdate\":1695056754205,\"lastSave\":1695056752884,\"totalPlaytime\":231697600,\"currentWork\":{\"ctor\":\"ClassWork\",\"data\":{\"type\":\"CLASS\",\"singularity\":false,\"cyclesWorked\":238391,\"earnings\":{\"money\":0,\"reputation\":0,\"hackExp\":19392.594210107294,\"strExp\":0,\"defExp\":0,\"dexExp\":0,\"agiExp\":0,\"chaExp\":0,\"intExp\":953.5640000000714},\"classType\":\"Computer Science\",\"location\":\"Rothman University\"}},\"focus\":false,\"entropy\":0,\"identifier\":\"436f7085e0db8\",\"hacking_exp\":2.6881171418161356e+43,\"hacking\":3000,\"strength_exp\":3163673949,\"strength\":500,\"defense_exp\":3163673949,\"defense\":500,\"intelligence_exp\":3163673949,\"intelligence\":500,\"charisma_exp\":3163673949,\"charisma\":500,\"agility_exp\":3163673949,\"agility\":500,\"dexterity_exp\":3163673949,\"dexterity\":500}}","AllServersSave":"{\"home\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":8,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"home\",\"httpPortOpen\":false,\"ip\":\"52.3.7.0\",\"isConnectedTo\":false,\"maxRam\":1073741824,\"messages\":[\"hackers-starting-handbook.lit\",\"truthgazer.msg\"],\"organizationName\":\"Home PC\",\"programs\":[\"NUKE.exe\",\"BruteSSH.exe\",\"FTPCrack.exe\",\"relaySMTP.exe\",\"HTTPWorm.exe\",\"SQLInject.exe\",\"ServerProfiler.exe\",\"DeepscanV1.exe\",\"DeepscanV2.exe\",\"AutoLink.exe\",\"Formulas.exe\"],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"early-hacking-template.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    // Defines the \\\"target server\\\", which is the server\\n    // that we're going to hack. In this case, it's \\\"n00dles\\\"\\n    const target = \\\"n00dles\\\";\\n\\n    // Defines how much money a server should have before we hack it\\n    // In this case, it is set to the maximum amount of money.\\n    const moneyThresh = ns.getServerMaxMoney(target);\\n\\n    // Defines the maximum security level the target server can\\n    // have. If the target's security level is higher than this,\\n    // we'll weaken it before doing anything else\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\n\\n    // If we have the BruteSSH.exe program, use it to open the SSH Port\\n    // on the target server\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n        ns.brutessh(target);\\n    }\\n\\n    // Get root access to target server\\n    ns.nuke(target);\\n\\n    // Infinite loop that continously hacks/grows/weakens the target server\\n    while(true) {\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\n            // If the server's security level is above our threshold, weaken it\\n            await ns.weaken(target);\\n        } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n            // If the server's money is less than our threshold, grow it\\n            await ns.grow(target);\\n        } else {\\n            // Otherwise, hack it\\n            await ns.hack(target);\\n        }\\n    }\\n}\",\"filename\":\"early-hacking-template.js\",\"server\":\"home\"}}],[\"test.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    let output\\n    const exeList = [\\\"AutoLink.exe\\\", \\\"BruteSSH.exe\\\", \\\"DeepscanV1.exe\\\", \\\"DeepscanV2.exe\\\", \\\"FTPCrack.exe\\\", \\\"Formulas.exe\\\", \\\"HTTPWorm.exe\\\", \\\"NUKE.exe\\\", \\\"SQLInject.exe\\\", \\\"ServerProfiler.exe\\\", \\\"relaySMTP.exe\\\"]\\n \\n    exeList.forEach(function (exe) {\\n        output = \\\"buy \\\" + exe\\n        if (ns.fileExists(exe) == false) {\\n            while (ns.fileExists(exe) == false) {\\n                const terminalInput = document.getElementById(\\\"terminal-input\\\")\\n                const handler = Object.keys(terminalInput)[1]\\n                terminalInput.value = output\\n                terminalInput[handler].onChange({ target: terminalInput })\\n                terminalInput[handler].onKeyDown({ keyCode: 13, preventDefault: () => null })\\n            }\\n            ns.toast(\\\"You bought: \\\" + exe + \\\".\\\")\\n        } else {\\n            ns.toast(exe + \\\" was bought already.\\\")\\n        }\\n    })\\n    ns.alert(\\\"You own all .exe files.\\\")\\n    ns.exit()\\n}\",\"filename\":\"test.js\",\"server\":\"home\"}}],[\"money.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns**/\\nexport async function main(ns) {\\nns.disableLog(\\\"ALL\\\"); //Visual clarity\\n\\n//Welcome to the Auto Farm part 2: Electric Boogaloo\\n//This script is a little more complicated to explain easily, it dedicates high RAM servers to attack high profit servers\\n//This is also set and forget, your EXEs and hacking level are reacquired each second, so new servers are added without needing to reboot it\\n//Well I hope this brings you ideas, knowledge and or profits :D\\n\\nvar files = [\\\"weak.script\\\", \\\"grow.script\\\", \\\"hack.script\\\"];//No touching, unless you understand everything here\\nawait ns.write(files[0], \\\"weaken(args)\\\", \\\"w\\\"); await ns.write(files[1], \\\"grow(args)\\\", \\\"w\\\"); await ns.write(files[2], \\\"hack(args)\\\", \\\"w\\\");\\n\\nvar serverList; var targetList; var hostList; var exes; var temp; var manager = false;\\nvar cycle = [0, \\\"─\\\", \\\"\\\\\\\\\\\", \\\"|\\\", \\\"/\\\"]; var latest = [[\\\"-\\\", \\\"-\\\"], [\\\"-\\\", \\\"-\\\"], [\\\"-\\\", \\\"-\\\"]];\\nif (false) { brutessh(); ftpcrack(); relaysmtp(); httpworm(); sqlinject() } //Avoid RAM cost bypass error\\n\\nvar pServers = await ns.prompt(\\\"Use player servers as hosts?\\\");\\n\\nasync function scanExes() {\\nexes = [\\\"BruteSSH\\\", \\\"FTPCrack\\\", \\\"relaySMTP\\\", \\\"SQLInject\\\", \\\"HTTPWorm\\\"];\\nfor (let i = 0; i <= exes.length - 1; i++) { if (!ns.fileExists(exes + \\\".exe\\\")) { exes.splice(i, 1); i-- } }//Removes EXEs you don't have\\n}\\n\\nfunction arraySort(array) { return array.sort(function (a, b) { return b[0] - a[0] }) }//Sorts nested arrays\\nfunction logBalance(server) {//For balance in display\\nreturn [ns.nFormat(ns.getServerMoneyAvailable(server), '0a')] + \\\" / \\\" + [ns.nFormat(ns.getServerMaxMoney(server), '0a')]\\n+ \\\" : \\\" + ns.nFormat(ns.getServerMoneyAvailable(server) / ns.getServerMaxMoney(server), '0%')\\n}\\n\\nasync function log() {//The display\\nif (cycle[0] >= 4) { cycle[0] = 0 }; cycle[0]++;//Speen\\nns.clearLog();\\nns.print(\\\"╔═══╦═╣ HOST ╠════════════════╣ TARGET ╠═╗\\\");\\nns.print(\\\"║ G ║ \\\" + latest[0][0] + latest[0][1].padStart(34 - latest[0][0].length) + \\\" ║\\\")\\nns.print(\\\"║ W ║ \\\" + latest[1][0] + latest[1][1].padStart(34 - latest[1][0].length) + \\\" ║\\\")\\nns.print(\\\"║ H ║ \\\" + latest[2][0] + latest[2][1].padStart(34 - latest[2][0].length) + \\\" ║\\\")\\nns.print(\\\"║ \\\" + cycle[cycle[0]] + \\\" ╠════════════════════════════════════╣\\\")\\nif (targetList.length < 6) { ns.print(\\\"╚═══╝ ║\\\") } else {\\nns.print(\\\"╠═══╝ Priority Servers Balance ║\\\")\\nfor (let i = 0; i < 6; i++) {\\ntemp = targetList[1];\\nns.print(\\\"║ > \\\" + temp + logBalance(temp).padStart(36 - temp.length) + \\\" ║\\\")\\n}\\nns.print(\\\"╠════════════════════════════════════════╝\\\")\\nns.print(\\\"║ EXE \\\" + exes.length + \\\"/5 ║ HOSTS \\\" + hostList.length + \\\" ║ TARGETS \\\" + targetList.length)\\nns.print(\\\"╠════════════════════════════════════════╗\\\")\\nif (manager) {\\nns.print(\\\"╠══════╣ Managing \\\" + ns.hacknet.numNodes() + \\\" HNet Nodes ╠\\\".padEnd(21, \\\"═\\\") + \\\"╣\\\")\\n}\\n}\\n}\\n\\nasync function scanServers() {//Finds all servers\\nserverList = ns.scan(\\\"home\\\"); let serverCount = [serverList.length, 0]; let depth = 0; let checked = 0; let scanIndex = 0;\\nwhile (scanIndex <= serverCount[depth] - 1) {\\nlet results = ns.scan(serverList[checked]); checked++;\\nfor (let i = 0; i <= results.length - 1; i++) {\\nif (results != \\\"home\\\" && !serverList.includes(results)) {\\nserverList.pus